{"version":3,"sources":["assets/data/samples/Kick.WAV","assets/data/samples/Snare.WAV","assets/data/samples/ClosedHat.WAV","assets/data/samples/OpenHat.WAV","assets/data/samples/Clap.WAV","assets/data/samples/Bass.wav","assets/data/samples/PAD.mp3","data/classes/AudioManager/index.js","containers/App/Sampler/index.js","containers/App/Sampler/Instrument/Step/index.js","containers/App/Sampler/Instrument/index.js","containers/App/Sampler/BPMIndicator/index.js","containers/App/Sampler/helpers.js","containers/App/index.js","index.js"],"names":["module","exports","AudioContext","window","webkitAudioContext","AudioManager","synth","this","context","latencyHint","sampleRate","bufferSize","processor","createScriptProcessor","onaudioprocess","audioCallback","bind","connect","destination","suspend","event","timerID","Step","props","playSound","instrument","audioManager","state","cachedSample","file","source","createBufferSource","buffer","playbackRate","value","pitch","gainNode","createGain","gain","volume","start","url","audioContext","callback","request","XMLHttpRequest","originalUrl","replace","open","responseType","onload","decodeAudioData","response","send","loadSample","samplePath","originalPath","setState","toggleOpen","isOpen","setPitch","setVolume","reset","undefined","newProps","console","log","selected","selection","selectionID","marker","active","className","Fragment","onClick","onSelect","toFixed","Component","Instrument","handleSelect","index","selectedSteps","drawSteps","groupedContent","i","settings","steps","sequencer","currentPosition","push","key","initial","children","BPMIndicator","generateContentBasedOnSteps","type","Sampler","handleChange","name","target","manageNextPosition","handlePlay","tempo","linesPerBeat","interval","Math","pow","setInterval","handleStop","clearInterval","addNewInstrument","instruments","concat","id","String","length","Date","now","onDelete","_newInstrumentList","filter","editName","find","indexOf","editSamplePath","data","FormData","append","files","postURI","location","hostname","axios","post","then","status","filePath","filename","catch","err","innerWidth","kick","snare","clhat","ohat","clap","bass","pad","nextProps","nextState","audioManagerAllowed","onChange","min","map","for","App","resumeAudioContext","resume","href","element","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3f3a10c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Kick.6471470d.WAV\";","module.exports = __webpack_public_path__ + \"static/media/Snare.d76d77c9.WAV\";","module.exports = __webpack_public_path__ + \"static/media/ClosedHat.bf48fb20.WAV\";","module.exports = __webpack_public_path__ + \"static/media/OpenHat.67b2afb3.WAV\";","module.exports = __webpack_public_path__ + \"static/media/Clap.ce5193f6.WAV\";","module.exports = __webpack_public_path__ + \"static/media/Bass.a8a60608.wav\";","module.exports = __webpack_public_path__ + \"static/media/PAD.9c1dc1af.mp3\";","// @flow\nconst AudioContext = window.AudioContext || window.webkitAudioContext\n\nclass AudioManager {\n  context: typeof AudioContext\n  bufferSize: number\n  processor: any\n\n  constructor (synth: any) {\n    this.context = new AudioContext({\n      latencyHint: 'interactive',\n      sampleRate: 44100,\n    })\n\n    this.bufferSize = 4096\n\n    this.processor = this.context\n      .createScriptProcessor(this.bufferSize, 0, 1)\n    this.processor\n      .onaudioprocess = this.audioCallback.bind(this)\n    this.processor\n      .connect(this.context.destination)\n\n    // Don't enable by default, instead allow user to initialize the AudioContext\n    this.context.suspend()\n  }\n\n  audioCallback (event: any) {}\n}\n\nexport default AudioManager\n","// @flow\nimport React, { Component } from 'react'\nimport Instrument from './Instrument'\n// $Ignore\nimport kick from 'assets/data/samples/Kick.WAV'\n// $Ignore\nimport snare from 'assets/data/samples/Snare.WAV'\n// $Ignore\nimport clhat from 'assets/data/samples/ClosedHat.WAV'\n// $Ignore\nimport ohat from 'assets/data/samples/OpenHat.WAV'\n// $Ignore\nimport clap from 'assets/data/samples/Clap.WAV'\n// $Ignore\nimport bass from 'assets/data/samples/Bass.wav'\n// $Ignore\nimport pad from 'assets/data/samples/PAD.mp3'\n// $Ignore\nimport axios from 'axios'\n// $Ignore\nimport { MdFileUpload as UploadIcon } from \"react-icons/md\"\n// $Ignore\nimport { FiTrash2 as RemoveIcon } from \"react-icons/fi\"\nimport { generateContentBasedOnSteps } from './helpers'\nimport AudioManager from 'data/classes/AudioManager'\nimport './index.css'\n\n\ntype Props = {\n  audioManagerAllowed: boolean,\n  audioManager: AudioManager,\n}\n\ntype State = {\n  settings: {\n    tempo: number,\n    steps: number,\n    linesPerBeat: number,\n  },\n  sequencer: {\n    currentPosition: number,\n  },\n  instruments: Array<{\n    id: string,\n    name: string,\n    samplePath: string,\n  }>\n}\n\nvar timerID\n\nclass Sampler extends Component<Props, State> {\n  constructor (props: Props) {\n    super (props)\n\n    this.state = {\n      settings: {\n        tempo: 120,\n        steps: window.innerWidth > 880 ? 16 : 8,\n        linesPerBeat: 4,\n      },\n      sequencer: {\n        currentPosition: 0,\n      },\n      instruments: [\n        {\n          id: String(0 + Date.now()),\n          name: 'Kick',\n          samplePath: kick,\n        },\n        {\n          id: String(1 + Date.now()),\n          name: 'Snare',\n          samplePath: snare,\n        },\n        {\n          id: String(2 + Date.now()),\n          name: 'Closed Hat',\n          samplePath: clhat,\n        },\n        {\n          id: String(3 + Date.now()),\n          name: 'Open Hat',\n          samplePath: ohat,\n        },\n        {\n          id: String(4 + Date.now()),\n          name: 'Clap',\n          samplePath: clap,\n        },\n        {\n          id: String(5 + Date.now()),\n          name: 'Bass',\n          samplePath: bass,\n        },\n        {\n          id: String(6 + Date.now()),\n          name: 'Pad',\n          samplePath: pad,\n        },\n      ],\n    }\n\n    // Sequencer Logic\n    this.handleChange = this.handleChange.bind(this)\n    this.handlePlay = this.handlePlay.bind(this)\n    this.manageNextPosition = this.manageNextPosition.bind(this)\n    // Add Instruments\n    this.addNewInstrument = this.addNewInstrument.bind(this)\n    // Delete Instruments\n    this.onDelete = this.onDelete.bind(this)\n    // Edit A Instrument\n    this.editName = this.editName.bind(this)\n    this.editSamplePath = this.editSamplePath.bind(this)\n  }\n\n  // Song Settings\n  handleChange = (event: SyntheticInputEvent<*>) => {\n    const name = event.target.name\n    const value = event.target.value\n\n    this.setState({\n      settings: {\n        ...this.state.settings,\n        [name]: value,\n      },\n    })\n  }\n\n  // Sequencer Logic Here\n  manageNextPosition = () => {\n    const { currentPosition } = this.state.sequencer\n    const { steps } = this.state.settings\n\n    if (currentPosition + 1 >= steps) {\n\n      this.setState({\n        sequencer: {\n          ...this.state.sequencer,\n          currentPosition: 0,\n        },\n      })\n    } else {\n\n      this.setState({\n        sequencer: {\n          ...this.state.sequencer,\n          currentPosition: this.state.sequencer.currentPosition + 1,\n        },\n      })\n    }\n  }\n\n  handlePlay = () => {\n    // 60 000 / (bpm / linesPerBeat) = desired ms for a quarter note\n    // Never allow tempo or lpb to be 0 or it will produce insane fast intervals\n    const tempo = this.state.settings.tempo || 1\n    const linesPerBeat = this.state.settings.linesPerBeat || 1\n    const interval = ((Math.pow(10, 4) * 6) / linesPerBeat) / tempo\n\n    timerID = setInterval(\n      () => this.manageNextPosition(),\n      interval,\n    )\n  }\n\n  handleStop = () => {\n    clearInterval(timerID)\n  }\n\n  componentWillUnmount() {\n    this.handleStop()\n  }\n\n  componentDidUpdate(nextProps: Props, nextState: State) {\n    if (this.state.settings !== nextState.settings) {\n      this.handleStop()\n\n      if (nextProps.audioManagerAllowed) {\n        this.handlePlay()\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    nextProps.audioManagerAllowed\n      ? this.handlePlay()\n      : this.handleStop()\n  }\n\n  // Add new instruments\n  addNewInstrument = () => {\n    this.setState({\n      instruments: this.state.instruments.concat({\n        id: String(this.state.instruments.length + Date.now()),\n        name: 'Instrument ' + this.state.instruments.length,\n        samplePath: '',\n      })\n    })\n  }\n\n  onDelete = (index: string) => {\n    const _newInstrumentList = this.state.instruments.filter(instrument => {\n      return instrument.id !== index\n    })\n\n\n    this.setState({\n      instruments: _newInstrumentList,\n    })\n  }\n\n  // Instrument Edit\n\n  editName = (index: string) => (event: SyntheticInputEvent<*>) => {\n    const value = event.target.value\n    const instruments = this.state.instruments\n    const target = instruments.find(instrument => instrument.id === index)\n    instruments[instruments.indexOf(target)].name = value\n\n    this.setState({\n      instruments,\n    })\n  }\n\n  editSamplePath = (index: string) => (event: SyntheticInputEvent<*>) => {\n    const data = new FormData()\n    data.append('file', event.target.files[0])\n\n    const postURI = (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\")\n      ? 'http://localhost:8000/upload'\n      : 'https://react-drum-machine-sampler.herokuapp.com/upload'\n      \n    axios.post(postURI, data, {})\n         .then(response => {\n           console.log(response)\n           if (response.status === 200) {\n             const filePath = 'public/uploads/' + response.data.filename\n             const instruments = this.state.instruments\n             const target = instruments.find(instrument => instrument.id === index)\n             instruments[instruments.indexOf(target)].samplePath = filePath\n\n             // Update component state with new sample path\n             this.setState({\n               instruments,\n             })\n           }\n         })\n         .catch(err => console.log('upload failed: ', err))\n  }\n\n\n  render() {\n    const instruments = this.state.instruments\n\n    return (\n      <div className=\"settingsContainer\">\n        <div className=\"setting\">\n          <p>BPM:</p>\n          <input type='number' name='tempo' value={this.state.settings.tempo} onChange={this.handleChange} min={1} />\n          <p>Steps:</p>\n          <input type='number' name='steps' value={this.state.settings.steps} onChange={this.handleChange} min={1} />\n          <p>Lines Per Beat:</p>\n          <input type='number' name='linesPerBeat' value={this.state.settings.linesPerBeat} onChange={this.handleChange} min={1} />\n        </div>\n\n        {/* Bpm Indicator */}\n        <div className='bpmGrid'>\n          <div className='bpm default empty' /> {/* Simple offset to match the instrument grid logic below */}\n          {generateContentBasedOnSteps('bpm', this.state)}\n        </div>\n\n        {/* For Each Instrument, Have a Grid With The Steps */}\n        {instruments.length > 0 &&\n          <div className='instrumentGrid'>\n            {instruments.map((instrument, index) => (\n              <Instrument\n                key={instrument.id}\n                instrument={instrument}\n                sequencer={this.state.sequencer}\n                settings={this.state.settings}\n                audioManager={this.props.audioManager}\n              >\n                <input type=\"text\" value={instrument.name} onChange={(this.editName)(instrument.id)} />\n                \n                <div className=\"row\">\n                  <input name={instrument.id} id={instrument.id} className=\"inputfile\" type=\"file\" onChange={(this.editSamplePath)(instrument.id)} />\n                  <label for={instrument.id}><UploadIcon /></label>\n\n                  <button className=\"buttonRemove\" onClick={() => this.onDelete(instrument.id)}><RemoveIcon /></button>\n                </div>\n              </Instrument>\n            )\n          )}\n          </div>\n        }\n\n        {/* Add / remove instrument menu */}\n        <div className='addNewInstrument' onClick={this.addNewInstrument}>\n          <div className='emptyStep'><p>+</p></div> {/* Simple offset to match the instrument grid logic below */}\n          {generateContentBasedOnSteps('placeholder', this.state)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sampler\n","// @flow\nimport React, { Component } from 'react'\nimport './index.css'\n// $Ignore\nimport { \n  MdSettings as SettingsIcon,\n  MdAddCircleOutline as AddIcon, \n  MdRemoveCircleOutline as RemoveIcon, \n} from 'react-icons/md'\nimport AudioManager from 'data/classes/AudioManager'\n\n\nfunction loadSample (url: string, audioContext: AudioContext, pitch = 1, volume = 1, callback: (file: any, originalPath: string) => mixed) {\n  var request = new XMLHttpRequest()\n\n  var originalUrl = url\n  url = url.replace('public/', '/')\n\n  request.open('GET', url, true)\n  request.responseType = 'arraybuffer'\n\n\n  // Decode asynchronously\n  request.onload = function () {\n    audioContext.decodeAudioData(request.response, function (buffer) {\n      // Now for the fun part :)\n      var source = audioContext.createBufferSource(); // creates a sound source\n\n      // Pitch\n      source.playbackRate.value = pitch\n      // Volume\n      var gainNode = audioContext.createGain()\n      gainNode.gain.value = volume\n      gainNode.connect(audioContext.destination)\n      source.connect(gainNode)\n\n      source.buffer = buffer\n      source.connect(audioContext.destination)\n      source.start(0)\n\n      callback(buffer, originalUrl) // Cache the sample\n    }, () => {})\n  }\n\n  request.send()\n}\n\ntype Props = {\n  active: boolean,\n  marker: boolean,\n  instrument: {\n    name: string,\n    samplePath: string,\n  },\n  audioManager: AudioManager,\n  onSelect: Function,\n  selection: Array<boolean>,\n  selectionID: number,\n}\n\ntype State = {\n  cachedSample: ?{\n    file: any,\n    originalPath: string,\n  },\n  isOpen: boolean,\n  pitch: number,\n  volume: number,\n}\n\nclass Step extends Component<Props, State> {\n  constructor (props: Props) {\n    super (props)\n\n    this.state = {\n      cachedSample: undefined,\n      pitch: 1,\n      volume: 1,\n      isOpen: false,\n    }\n\n    this.playSound = this.playSound.bind(this)\n    this.setPitch = this.setPitch.bind(this)\n    this.setVolume = this.setVolume.bind(this)\n    this.reset = this.reset.bind(this)\n    this.toggleOpen = this.toggleOpen.bind(this)\n  }\n\n  playSound = () => {\n    const { instrument, audioManager } = this.props\n\n    if (this.state.cachedSample && this.state.cachedSample.file) {\n      // Now for the fun part :)\n      var source = audioManager.context.createBufferSource(); // creates a sound source\n      source.buffer = this.state.cachedSample.file\n\n      // Pitch\n      source.playbackRate.value = this.state.pitch\n      // Volume\n      var gainNode = audioManager.context.createGain()\n      gainNode.gain.value = this.state.volume\n      gainNode.connect(audioManager.context.destination)\n      source.connect(gainNode)\n\n      source.connect(audioManager.context.destination)\n      source.start(0)\n    } else {\n      loadSample(instrument.samplePath, audioManager.context, this.state.pitch, this.state.volume, (file, originalPath) => this.setState({ cachedSample: { file: file, originalPath: originalPath } }))\n    }\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    if (!this.state.cachedSample) { return }\n    \n    if (this.state.cachedSample.originalPath !== newProps.instrument.samplePath) {\n      console.log('new file was uploaded, we need to remove the cached sample and make the client request the new sample')\n\n      this.setState({\n        cachedSample: undefined,\n      })\n    }\n  }\n\n  // Context Menus\n  toggleOpen = () => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    })\n  }\n\n  // Effects\n  setPitch = (value: number) => {\n\n    this.setState({\n      pitch: value,\n    })\n  }\n  setVolume = (value: number) => {\n\n    this.setState({\n      volume: value,\n    })\n  }\n  reset = () => {\n    this.setState({\n      pitch: 1,\n      volume: 1,\n    })\n  }\n\n  render() {\n    const selected = this.props.selection[this.props.selectionID]\n    const { marker, active } = this.props\n\n    let className = 'step '\n    className = marker ? className + 'stepMarker ' : className\n    className = active ? className + 'stepActive ' : className\n    className = selected ? className + 'stepSelected ' : className\n\n    // If sequencer has reached this step\n    if (active) {\n      if (selected) {\n        this.playSound()\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className={className} onClick={() => this.props.onSelect(this.props.selectionID)} />\n        <div className=\"optionWrapper\">\n          {selected && <button className=\"option\" onClick={this.toggleOpen}><SettingsIcon /></button>}\n        </div>\n        {this.state.isOpen && selected &&\n          <div className=\"contextMenuWrapper\">\n            <div className=\"contextMenu\">\n              <p>\n                <RemoveIcon onClick={() => this.setPitch(this.state.pitch - 0.05)} />\n                <p>Pitch: {(this.state.pitch).toFixed(2)}</p>\n                <AddIcon onClick={() => this.setPitch(this.state.pitch + 0.05)} />\n              </p>\n              <p>\n                <RemoveIcon onClick={() => this.setVolume((this.state.volume - 0.1))} />\n                <p>Volume: {(this.state.volume).toFixed(2)}</p>\n                <AddIcon onClick={() => this.setVolume((this.state.volume + 0.1))} />\n              </p>\n              <p>\n                <button onClick={() => this.reset()}>Reset</button>\n              </p>\n            </div>\n          </div>\n        }\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default Step\n","// @flow\nimport React, { Component, type Node } from 'react'\nimport Step from './Step'\nimport './index.css'\nimport AudioManager from 'data/classes/AudioManager'\n\ntype Props = {\n  audioManager: AudioManager,\n  settings: {\n    tempo: number,\n    steps: number,\n    linesPerBeat: number,\n  },\n  sequencer: {\n    currentPosition: number,\n  },\n  instrument: {\n    name: string,\n    samplePath: string,\n  },\n  children: Node,\n}\n\ntype State = {\n  selection: Array<boolean>,\n}\n\nclass Instrument extends Component<Props, State> {\n  constructor(props: Props) {\n    super (props)\n\n    var initial = []\n    for (let i = 0; i < this.props.settings.steps; i++) {\n      initial.push(false)\n    }\n\n    this.state = {\n      selection: initial,\n    }\n\n    this.drawSteps = this.drawSteps.bind(this)\n    this.handleSelect = this.handleSelect.bind(this)\n  }\n\n  handleSelect = (index: number) => {\n    const selectedSteps = this.state.selection\n    selectedSteps[index] = !selectedSteps[index]\n\n    this.setState({\n      selection: selectedSteps,\n    })\n  }\n\n  drawSteps = () => {\n    let groupedContent = []\n\n    for (let i = 0; i < this.props.settings.steps; i++) {\n      var active = i === this.props.sequencer.currentPosition\n      var marker = i % 4\n\n      groupedContent.push(\n        <Step\n          key={i}\n          active={active}\n          marker={!!marker}\n          instrument={this.props.instrument}\n          audioManager={this.props.audioManager}\n          onSelect={this.handleSelect}\n          selection={this.state.selection}\n          selectionID={i}\n        />\n      )\n    }\n\n    return groupedContent\n  }\n\n  render () {\n\n    return (\n      <React.Fragment>\n        <div className=\"stepsGrid\">\n          <div className='step default edit'>\n            {this.props.children}\n          </div>\n\n          {this.drawSteps()}\n        </div>\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default Instrument\n","// @flow\nimport React, { Component } from 'react'\nimport './index.css'\n\ntype Props = {\n  active: boolean,\n  marker: boolean,\n}\n\ntype State = {}\n\nclass BPMIndicator extends Component<Props, State> {\n  constructor (props: Props) {\n    super (props)\n\n    this.state = {\n    }\n  }\n\n  render() {\n    const { marker, active } = this.props\n\n    let className = 'bpm '\n    className = marker ? className + 'bpmMarker ' : className\n    className = active ? className + 'bpmActive ' : className\n\n    return (\n      <div className={className} />\n    )\n  }\n\n}\n\nexport default BPMIndicator\n","// @flow\nimport React from 'react'\nimport BPMIndicator from './BPMIndicator'\n\nexport var generateContentBasedOnSteps = (type: 'bpm' | 'placeholder', state: any) => {\n  let groupedContent = []\n\n  for (let i = 0; i < state.settings.steps; i++) {\n    var active = i === state.sequencer.currentPosition\n    var marker = i % 4\n\n    groupedContent.push(\n      type === 'placeholder'\n        ? <BPMIndicator key={i} active={false} marker={!!marker} />\n        : <BPMIndicator key={i} active={active} marker={!!marker} />\n    )\n  }\n\n  return groupedContent\n}\n","// @flow\nimport React, { Component } from 'react'\nimport AudioManager from 'data/classes/AudioManager'\nimport {\n  IoIosPlay as PlayIcon,\n  IoIosPause as PauseIcon,\n } from \"react-icons/io\"\nimport Sampler from './Sampler'\nimport './index.css'\n\ntype Props = {}\n\ntype State = {\n  audioManager: AudioManager,\n  audioManagerAllowed: boolean,\n}\n\nclass App extends Component<Props, State> {\n  constructor (props: Props) {\n    super (props)\n\n    this.state = {\n      audioManager: new AudioManager(),\n      audioManagerAllowed: false,\n    }\n\n    this.resumeAudioContext = this.resumeAudioContext.bind(this)\n  }\n\n  resumeAudioContext = () => {\n    if (this.state.audioManager) {\n      this.state.audioManagerAllowed\n        ? this.state.audioManager.context.suspend()\n        : this.state.audioManager.context.resume()\n\n      this.setState({ audioManagerAllowed: !this.state.audioManagerAllowed })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <div className=\"container\">\n        <button onClick={this.resumeAudioContext}>\n          {this.state.audioManagerAllowed\n            ? <span><PauseIcon /> Stop</span>\n            : <span><PlayIcon /> Play</span>\n          }\n        </button>\n\n        <Sampler\n          audioManagerAllowed={this.state.audioManagerAllowed}\n          audioManager={this.state.audioManager}\n        />\n\n        </div>\n          <footer>\n            <p>Made with <strong>React</strong> and <strong>Node JS</strong></p>\n            <br />\n            <p>André Fernandes / andrefcasimiro@gmail.com / v0.1 - 9/9/2019</p>\n            <br />\n            <a href='https://github.com/andrefcasimiro/music_sampler'>Get the src code... (Github)</a>\n        </footer>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// @flow\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'containers/App'\n\nconst element = document.getElementById('root')\n\nif (element) {\n  ReactDOM.render(<App />, element)\n}\n"],"sourceRoot":""}